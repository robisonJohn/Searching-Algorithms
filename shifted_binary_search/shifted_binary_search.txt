Write a function that takes in a sorted array of distinct integers as well as a target integer. 
The caveat is that the integers in the array have been shifted by some amount; in other words, they
have been moved to the left or right by one or more positions. i.e. [1,2,3,4] may now be [3,4,1,2].

The function should use a version of the Binary Search algorithm to determine if the target integer 
is contained in the array and should return its index if it is, otherwise -1.

i.e. array = [45,61,71,72,73,0,1,21,33,37]
target = 33
return 8

Hint 1
The Binary Search algorithm involves a left pointer and a right pointer to find the middle number in an array. 
Unlike with a normal sorted array, you cannot simply find the middle number and compare it to the target because 
the shift may lead you in the wrong direction. Realize that when you find the middle number in the array, then 
either the left pointer is smaller than or equal to the middle number or it is bigger. Eliminate half of the array
depending on the outcome of this scenario.

Hint 2
If the left pointer is smaller than or equal to the middle number, then either target < middle and target >= left or 
not. In the former case, the right half may be eliminated. In the latter case, the left half may be eliminated. 





